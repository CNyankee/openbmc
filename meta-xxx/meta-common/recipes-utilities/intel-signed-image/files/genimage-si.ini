;
; Copyright 2015 Intel Corporation.
;
; The source code, information and material ("Material") contained herein is
; owned by Intel Corporation or its suppliers or licensors, and title to such
; Material remains with Intel Corporation or its suppliers or licensors. The
; Material contains proprietary information of Intel or its suppliers and
; licensors. The Material is protected by worldwide copyright laws and treaty
; provisions. No part of the Material may be used, copied, reproduced,
; modified, published, uploaded, posted, transmitted, distributed or disclosed
; in any way without Intel's prior express written permission. No license under
; any patent, copyright or other intellectual property rights in the Material
; is granted to or conferred upon you, either expressly, by implication,
; inducement, estoppel or otherwise. Any license under such intellectual
; property rights must be express and approved by Intel in writing.

;
; This file is similar to the config.genimage2 file of previous BMC
; generations but it is not generated. It contains all of the information
; to generate the signed-image variant of the signtool config file.
;

[GLOBAL]
Major        = 0
Minor        = 72
Output       = update.bin
Alloc        = 33792K ; 0x2100000
BlockSize    = 64K
Type         = 0xffffffff ; generate top level composite image
Locate       = 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Factory ROM file generation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RomOutput    = rom-a-only.ima
RomAlloc     = 33M
KeyRegion    = Certificate
NewKeyRegion = ReplacementCertificate
SecVersion   = 0



; RecoveryOnly items should be place first in the image

[FRISBEE_ROM]
Major        = 1
Minor        = 5
Type         = ROBL
File         = frisbee.bin
Locate       = 0x00000000
Alloc        = 240K
Compress     = 0
SecVersion   = 1
Unsigned     = 1

[Certificate]
Locate       = 0x3c000
Type         = CERT
Alloc        = 8K
Fill         = 0xff
Unsigned     = 1
ROMOnly      = 1
SecVersion   = 0

;[FWPRODUCTID]
;Major        = 1
;Minor        = 0
;Type         = FWID
;File         = fwproductid.bin
;Locate       = 0x0003f000
;ROMOnly      = 1
;SecVersion   = 0

[FRISBEE_UPD]
Major        = 1
Minor        = 5
Type         = RWBL
File         = frisbee.bin
Locate       = 0x040000
Alloc        = 256K
Compress     = 0
SecVersion   = 1
IndivSign    = 1
SigOffset    = 0x03e000

[U-Boot]
Major        = 1
Minor        = 5
Type         = UBT\x00
File         = u-boot.bin
Alloc        = 256K
Compress     = 0
SecVersion   = 1
IndivSign    = 1
SigOffset    = 0x03e000

; Linux OS Image
[OSIMAGE]
Major        = 1
Minor        = 1
Type         = LKNL
File         = uImage
SecVersion   = 1

[DTB]
Major        = 1
Minor        = 1
Type         = DTB\x00
File         = uImage-aspeed-bmc-intel-ast2500.dtb
SecVersion   = 0

; Root File System
[ROOT]
Major        = 1
Minor        = 1
Type         = RtFS
File         = image-rofs.squashfs-xz.u-boot
Load         = 0x83000000
SecVersion   = 1
;
; WWW File System in CRAMFS.
;[WWW]
;Major        = 1
;Minor        = 1
;Type         = WWW\x00
;File         = webfs.bin
;BlockDev     = 1
;SecVersion   = 1

; Replacement certificate for re-keying the BMC
; Will only be added to image if -rk is specified
[ReplacementCertificate]
Major        = 1
Minor        = 1
Type         = CRT0
Alloc        = 4K
SecVersion   = 0
Compress     = 0
IndivSign    = 1
Unbound      = 1
Fill         = 0xff
SigOffset    = 0x800

; Manifest goes here
; This gets some special treatment (this needs to match the location
; that Frisbee thinks the manifest is at or it won't boot)
[Manifest]
Major        = 0
Minor        = 0
Type         = MFST
Alloc        = 4K
Locate       = 0x1bff000
Fill         = 0xff
SecVersion   = 0

;
; NV File System in JFFS2, but it is blank in the ROM version
; and filled in with defaults from the rootfs
[PARAMS]
Major        = 1
Minor        = 1
Type         = CONF
Alloc        = 4096K
Locate       = 0x1c00000
ROMOnly      = 1
BlockDev     = 1
SecVersion   = 1
Unsigned     = 1

; notice that these sections have no file
; and are marked as ROMOnly.  This forces them
; into the allocation so we don't get overlapping
; sections, but does not actually put anything into
; the rom at build time.

[UBootEnv]
Major        = 1
Minor        = 0
Type         = UENV
; File       = ; no file makes this a placeholder
Locate       = 0x2000000
Alloc        = 64K
BlockDev     = 1
ROMOnly      = 1
Unsigned     = 1
SecVersion   = 0

[FRUData]
Major        = 1
Minor        = 0
Type         = FRU\x00
Alloc        = 64K
Locate       = 0x2010000
ROMOnly      = 1
Unsigned     = 1
SecVersion   = 0

[SEL]
Major        = 1
Minor        = 0
Type         = SEL\x00
Alloc        = 512K
Locate       = 0x2020000
BlockDev     = 1
ROMOnly      = 1
Unsigned     = 1
SecVersion   = 0

; NV filesystem that survives reset mfg defaults.
; OEM Web customization goes here.
[PersistentNV]
Major        = 1
Minor        = 0
Type         = PNV\x00
Alloc        = 2048K
Locate       = 0x20a0000
BlockDev     = 1
ROMOnly      = 1
Unsigned     = 1
SecVersion   = 0

[RubixLog]
Major        = 1
Minor        = 0
Type         = BTLG
Alloc        = 4K
Locate       = 0x23fe000
BlockDev     = 0
ROMOnly      = 1
Unsigned     = 1
SecVersion   = 0

[BootPointer]
Major        = 1
Minor        = 0
Type         = BPTR
Alloc        = 4K
Locate       = 0x23ff000
BlockDev     = 0
ROMOnly      = 1
Unsigned     = 1
SecVersion   = 0

;
; Example Section with all possible fields with their default
; values, unless the field is specified mandatory
;
;[EXAMPLE]
;Major        = 0     ; Major number of module
;Minor        = 0     ; Minor number of module
;Type         = TYPE  ; four bytes hopefully human readable,
;                     ; use c-style escapes if non-ascii, \x23\x10\x00\xf3
;                     ; or use a number 0xf3001023
;Alloc        = X     ; Maximum memory allocated; X = roundup
;File         = name  ; File containing the module
;                     ; If Alloc is specified, but no File, a blank
;                     ; header will be created (only useful for ROMOnly)
;Locate       = addr  ; Location in Flash; MANDATORY
;ROMOnly      = 1     ; if ROMOnly is set and non-zero, this section
;                     ; will only be present in the ROM image, not the updater image
;RecoveryOnly = 1     ; if RecoveryOnly is set and non-zero, this section
;                     ; will only be present in the recovery image, not the active image
;BlockDev     = 1     ; this will make the signed image code export this
;                     ; image as a mtd block device at runtime
;Unsigned     = 1     ; Do not include this section in signatures (NV data)
;Compress     = 1     ; compress image contents (useful for non-compressed items)
;SecVersion   = X     ; a 16-bit security revision to enforce no downgrades
;IndivSign    = 1     ; section is individually signed; do not include in full signature
;Unbound      = 1     ; by default, individually signed sections are part of the
;                     ; full signature too. This makes them independent
;SigOffset    = X     ; offset within individually-signed section to place signature
;Fill         = xx    ; fill with pattern xx instead of a file's contents
;
; Note: Numeric values can be represented either by decimal or a
;       hexadecimal (Prefixed by 0x)
;       Numeric values can either end with K or M to specify in
;       KiloBytes or MegaBytes
;
